package ch14;import java.lang.reflect.InvocationHandler;import java.lang.reflect.Method;import java.lang.reflect.Proxy;import java.net.InterfaceAddress;public class DynamicProxyHandler implements InvocationHandler{	private Object proxied;	public  DynamicProxyHandler(Object p){		proxied = p;			}	/**	 * @param args	 */	public static void main(String[] args) {		// TODO Auto-generated method stub	}	@Override	public Object invoke(Object proxy, Method method, Object[] args)			throws Throwable {		// TODO Auto-generated method stub		System.out.println("proxy:" + proxy.getClass()+",method:" + method+",args:" +args);		if (args!=null) {			for(Object object:args){				System.out.print(args+"  ");			}		}				return method.invoke(proxied, args);//why?	}		static class SimpleDynamicProxy{		public static void  consumer(Interface interfaces ) {			interfaces.doSomething();			interfaces.somethingElse("Bonobo");					}				public static void main(String[]args){			RealObject real = new RealObject();			consumer(real);			Interface proxy = (Interface) Proxy.newProxyInstance(Interface.class.getClassLoader(),					new Class[] {Interface.class},					new DynamicProxyHandler(real));						consumer(proxy);		}	}}